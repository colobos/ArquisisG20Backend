services: # The containers we are going to run
  app:
    build:
      context: ./Api_Rest/ # The path in the machine that have the files, in this case root
      dockerfile: Dockerfile # The name of the Dockerfile definition
    container_name: app
    restart: unless-stopped
    volumes:
      - ./Api_Rest/src:/Api_Rest # To copy changes in the local machine to the container.
    ports:
      - "3000:3000" # To expose the app to the machine localhost (machine-port:container:port)
    networks:
      - app-network # Connect the app to the network, in this case to use the database
      - jobmaster-network
      - admin-network
    depends_on: # Build dependencies in case one containers needs another to be builded first
      - db # To build after the database
    env_file:
      - .env
      
  admin:
    build:
      context: ./Admin # The path in the machine that have the files, in this case root
      dockerfile: Dockerfile # The name of the Dockerfile definition
    container_name: admin
    restart: unless-stopped
    volumes:
      - ./Admin/src:/app/src # To copy changes in the local machine to the container.
    ports:
      - "5000:3000" # To expose the app to the machine localhost (machine-port:container:port)
    networks:
      - admin-network # Connect the app to the network, in this case to use the database
      - app-network   
    depends_on: # Build dependencies in case one containers needs another to be builded first
      - admin_db
    env_file:
      - .env

  admin_db: # The database service
    image: postgres # Using the oficial dockerhub image
    container_name: postgres_admin
    networks:
      - admin-network # Connect to the network to be used by other containers (ej: the web server)
    env_file:
      - .env
    volumes:
      # To persist the data in the database we have a volume that persist after container deletion
      # and copy the files from the container to the volume.
      - db-volume:/var/lib/postgresql/data 

  db: # The database service
    image: postgres # Using the oficial dockerhub image
    container_name: postgres_app
    networks:
      - app-network # Connect to the network to be used by other containers (ej: the web server)
    env_file:
      - .env
    volumes:
      # To persist the data in the database we have a volume that persist after container deletion
      # and copy the files from the container to the volume.
      - db-volume-admin:/var/lib/postgresql/data 

  app_listener:
    build:
      context: ./Listener_App/ # The path in the machine that have the files, in this case root
      dockerfile: Dockerfile # The name of the Dockerfile definition
    container_name: app_listener
    restart: unless-stopped
    volumes:
      - ./Listener_App/src:/Listener_App/src # To copy changes in the local machine to the container.
    ports:
      - "8000:8000" # To expose the app to the machine localhost (machine-port:container:port)
    networks:
      - app-network # Connect the app to the network, in this case to use the database
    env_file:
      - .env

  jobmaster:
    build: 
      context: ./fastApi/
      dockerfile: Dockerfile
    container_name: fastApi
    command: pipenv run start_jobMaster
    volumes:
      - ./fastApi:/fastApi
    ports:
      - "9000:9000"
    depends_on:
      - redis
    networks:
      - redis-network
      - jobmaster-network
    env_file:
      - .env
          
  celery:
    build: 
      context: ./fastApi/
      dockerfile: Dockerfile
    command: pipenv run start_workers
    volumes:
      - ./fastApi:/app
    depends_on:
      - redis
      - db
    networks:
      - redis-network
      - app-network
    env_file:
      - .env
  
  redis:
    image: "redis:alpine"
    networks:
      - redis-network

networks: # All the networks that connects our containers
  app-network:
    driver: bridge
  admin-network:
    driver: bridge
  jobmaster-network:
    driver: bridge
  redis-network:
        driver: bridge

volumes: # All the named volumes needed to persist data after container deletion
  db-volume:
  db-volume-admin: